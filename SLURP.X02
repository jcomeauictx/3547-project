;SLURP - pull images off the STP disk using a packet driver
;Revisions: 
;X01 6/29/95 first test
;X02 7/11/95 still locks up, added SAVAL routine, modified REMQUE
debug=1 ;set to zero when debugged
debug1=1 ;set to one to make it debuggable with no ethernet attached
;There should be no need to mark packets that have been allocated but not
;yet filled, because it should be all done before control is passed back to
;this program... but am testing anyway... (inverting count word in packet)
sync=0 ;set to one if it is determined that syncing is necessary
timeout equ     90      ;minute and a half no packets, disconnect
tmoval=(timeout*182)/10 ;approx number of ticks
cr      equ     13
lf      equ     10
ff      equ     12
so      equ     14
s       equ     15
esc     equ     27
dos     equ     21h
stderr  equ     2       ;standard error device
#if debug
mode    equ     6       ;promiscuous mode when debugging, recv all packets
#else
mode    equ     3       ;unicast packets only for release (plus broadcast)
;would rather use mode 2 but it's not implemented on most packet drivers
#endif
net     equ     60h     ;assume loaded here
;
print   macro
	info    'SLURP -- ',#1
	#em
;
pprint  macro   ;"partial print"
	strout  'SLURP -- ',#1
	#em
;
info    macro
	call    txterr
	jmp     short >m1
	db      #1,#2,#3,#4,#5,#6,#7,#8,#9,cr,lf
m1:
	#em
;
strout  macro
	call    txterr
	jmp     short >m1
	db      #1,#2,#3,#4,#5,#6,#7,#8,#9
m1:
	#em
;
numout  macro
##if "#1" ne "ax"        
	mov     ax,#1 #2
##endif        
	call    numerr
	#em
;
hexout  macro
##if "#1" ne "ax"        
	mov     ax,#1 #2
##endif
	call    hexerr
	#em
;
errchk  macro
	call    #1
	#em
;
dbgmsg  macro
	#if debug
	print   #1
	#endif
	#em
;
testz   macro   ;see if it's zero
	or      #1,#1 ;only for registers, of course
	#em
;
clear   macro   ;set to zero
	xor     #1,#1 ;only for registers
	#em
;
	jmp     start   ;skip data area
ohandle dw      0       ;storage for output handle
ihandle dw      0       ;input handle (network)
altdta  db      64 dup (?) ;alternate DTA area
freqhd  dw      inbuffer,0 ;free space listhead, singly-linked
rcvqhd  dw      rcvqhd,rcvqhd,0 ;packet reception listhead, doubly-linked
quiet   dw      0       ;2's comp of timer count at last packet received
quitchrs db     0,3,26,27 ;function keys, ^C, ^Z, ESC will terminate
quitlen = $-quitchrs ;length of string
pktcount dw     0       ;primarily for debugging
fullpool dw     0       ;count of times pool found full
badqueue dw     0       ;inced when queue found corrupted
;
start:  info    "Slurp - Pull IPSS images off the STP disk"
	info    "Version X02, Copyright (C) 1995 USPS"
	mov     bx,1000h ;number of paragraphs to keep
	mov     ah,4ah  ;dos function to modify memory size
	int     dos     ;assume OK
	mov     dx,offset altdta ;make a safe DTA
	mov     ah,1ah  ;SET DTA service
	int     dos     ;assume OK
	call    tmorst  ;initialize the timeout
	call    openout ;open the output file and check for errors
	errchk  >e1     ;abort on error
	call    openin  ;set up for datagram transmission and reception
	errchk  >e2     ;abort on error
	pprint  "DEBUG - Buffer starts at "
	hexout  offset inbuffer
	strout  cr,lf
	call    connect ;begin the transfer session
	errchk  >e3     ;abort on error
	call    receive ;get all the data off the STP disk
	errchk  >e4     ;on any error, just quit
	call    release ;disconnect from network interrupts
	mov     ax,4c00 ;otherwise exit with ERRORLEVEL 0
	int     dos
e1:     jnc     ret
	mov     ax,4c01h ;errorlevel 1
	int     dos     ;exit
	ret     ;target for jump
e2:     jnc     ret
	mov     ax,4c02h ;errorlevel 2
	int     dos     ;exit
e3:     jnc     ret
	call    release ;disconnect from network interrupts
	mov     ax,4c03 ;errorlevel 3
	int     dos     ;exit
e4:     jnc     ret
	call    release ;disconnect from network interrupts
	mov     ax,4c04 ;errorlevel 4
	int     dos
;
openout:
	mov     si,offset >a1 ;point to filename
	mov     cx,0    ;file attribute
	mov     bx,4001h ;write with auto-commit enabled
	mov     dx,11h   ;if file exists, open, else create
	mov     ah,6ch  ;extended open service
	int     dos     ;request service
	errchk  >e1     ;check for errors
	ret     ;return success
a1:     db      '3547imgs.dat',0
e1:     jc      >e2     ;quit on failure
	mov     ohandle,ax ;save handle
	mov     bx,ax   ;also into BX in case it worked
	cmp     cx,1    ;was an existing file opened?
	jne     ret     ;continue if not
	xor     cx,cx   ;clear offset registers
	mov     dx,cx   ;...
	mov     ax,4202h ;move file pointer to EOF
	int     dos     ;request service
	jc      >e2     ;quit on error
	print   'Info - Appending to existing file'
	ret
e2:     print   '*FATAL* - Failed to create output file'
	pop     ax      ;don't continue
	ret     ;to main routine
;
openin:
	mov     bx,-1   ;set up type descriptor
	xor     cx,cx   ;length
	push    ds      ;check first if driver is installed
	push    cx      ;need segment 0
	pop     ds      ;...
	mov     ax,[60h*4+2] ;get code segment of int handler
	pop     ds      ;restore data segment
	or      ax,ax   ;check if nonzero
	errchk  >e5     ;...
	mov     ax,201h ;receive both DIX and IEEE 802.3 framed packets
	mov     dl,cl   ;...
	mov     si,cx   ;...
	mov     di,offset handler ;set receive handler address
	int     net     ;try to register it...
	errchk  >e1     ;...
	mov     ihandle,ax ;store handle if OK
	mov     ah,20   ;according to BYTE May 1991 p.302
	mov     bx,ihandle ;get our handle
	mov     cx,mode ;set receive mode
	int     net     ;make the call
	errchk  >e2     ;check errors
	ret     ;OK if we're here
e1:     jnc     ret     ;resume if OK
	print   '*FATAL* - Could not register receive handler'
	pop     ax      ;toss return address
	ret     ;let main routine abort
e2:     jnc     ret     ;continue if OK
	pop     ax      ;return to main program
	cmp     dh,1    ;bad handle?
	jne     >e3     ;skip if not
	print   '*FATAL* - Bad file handle for network device'
	call    release ;attempt to deregister the handler
	stc     ;re-set the error flag
	ret
e3:     cmp     dh,8    ;bad mode?
	jne     >e4     ;skip if not
	print   '*FATAL* - Cannot access network with specified mode'
	call    release ;attempt to deregister the handler
	stc     ;set error flag
	ret
e4:     print   '*FATAL* - Unknown access error to network'
	call    release ;attempt to deregister the handler
	stc     ;set error flag
	ret
e5:     jnz     ret     ;assume OK if something was found there
	pop     ax      ;don't continue
	print   '*FATAL* - No packet driver was installed'
	stc     ;set error flag
	ret
;
tmorst:
;initialize/reset timeout value, global QUIET        
	push    ax
	push    cx
	push    dx
	xor     ah,ah   ;service 0, get current clock count
	int     1ah     ;from the BIOS
;note - no need to worry about clearing the midnight bit, since DOS will
;always see it first by processing the tick interrupt
	neg     dx      ;only use low-order part
	mov     quiet,dx ;store for checking later
	pop     dx
	pop     cx
	pop     ax
	ret
;
connect:
	ret     ;do nothing for test run
;
receive:
;the interrupt handler actually takes care of reception, here we store to
;disk and keep the user posted on progress...
r1:     ;don't check timeout while debugging
#if !debug1
	call    tmochk  ;check for timeout
	errchk  >e1     ;quit if so
#endif
	call    testkbd ;check for user termination
	errchk  >e3     ;quit if so
	call    chkerrs ;test for errors during interrupt routine
	errchk  >e3     ;quit on fatal error
	call    getpkt  ;fetch a packet from the queue
	errchk  >e4     ;quit if queue corrupted
#if debug1
	pushf   ;save Z flag if set
	push    dx,cx,si,di,ax ;simulate a packet coming over the wire
	clear   ax      ;for service 0
	int     1ah     ;get time word in ticks
	and     dx,3    ;get low 2 bits, 0-3
d1:     mov     cx,42h  ;minimum packet size
	xchg    cx,dx   ;switch count and size registers
	jcxz    >d3     ;quit when count is zero
	xchg    cx,dx   ;switch back
	clear   ax      ;null for buffer allocation
	call    insque  ;fake buffer allocation
	or      di,di   ;did it come back null?
	jz      >d3     ;quit if so
	mov     si,offset >d4 ;point to fake data, CX still has count
	rep     movsb   ;store the fake data
	inc     word ptr >d5 ;make it slightly different each time
	dec     dx      ;update the count
	jmp     d1      ;loop back around
d3:     pop     ax,di,si,cx,dx ;restore registers
	jmp     >d6     ;skip to end of debugging block
d4:     db      'This is fake Ethernet packet ['
d5:     db      0,0
	db      '], for testing, testing, testing  '
d6:     popf    ;restore flags
#endif ;debug1
	if z jmp r1 ;loop if nothing
	strout  '.'     ;output a dot for every packet
	call    tmorst  ;restart timeout counter
	mov     cx,4[di] ;get length word
	mov     dx,di   ;copy pointer
	add     dx,6    ;skip past list entry and length
	sub     cx,6    ;and adjust byte count accordingly
	mov     bx,ohandle ;get output file handle
	mov     ah,40h  ;write (auto-commit enabled)
	int     dos     ;attempt to write...
	errchk  >e2     ;abort on error
	call    remque  ;remove the entry from packet queue
	jmp     r1      ;loop back around
e1:     jnc     ret     ;return if OK
	strout  cr,lf   ;break from line of dots
	print   'WARNING - Timeout exceeded - shutting down now'
	pop     ax      ;return to main routine
	ret
e2:     jnc     ret     ;return if OK
	strout  cr,lf   ;break from line of dots
	print   '*FATAL* - Error on WRITE to disk'
	pop     ax      ;return to main routine to exit
	ret
e3:     jnc     ret     ;continue if no requested exit
	strout  cr,lf   ;break from line of dots
	pop     ax      ;return to main routine with carry set
	ret
e4:     jnc     ret     ;continue if OK
	strout  cr,lf   ;break from line of dots
	print   '*FATAL* - Input queue is corrupted'
	pop     ax      ;exit at main routine
	ret
;
chkerrs:
	cli     ;stop interrupts while we access error counts
	mov     ax,fullpool ;get count of times pool found full
	mov     fullpool,0 ;rezero the count
	sti     ;reenable interrupts
	testz   ax      ;did it fill up?
	errchk  >e1     ;announce if so, but don't abort
	cli     ;same check for corrupted packet queue
	mov     ax,badqueue ;...
	sti     ;don't need to clear it, we're aborting anyway
	testz   ax      ;...
	errchk  >e2     ;announce problem first, if any
	ret     ;with carry set if queue was bad
e1:     jz      ret     ;continue if zero
	strout  cr,lf   ;break from line of dots
	print   'WARNING - Packet(s) lost due to full buffer'
	ret
e2:     jz      ret     ;continue if zero        
	strout  cr,lf   ;break from line of dots
	print   '*FATAL* - Corrupted queue found by INSQUE routine'
	stc     ;so it will abort on return
	ret
;
testkbd:
;       mov     ax,0c06h ;clear keyboard buffer and get input, no echo
	mov     ax,0600h ;get input, no echo, don't clear buffer first
	mov     dl,0ffh ;specify input
	int     dos     ;do it now...
	jz      ret     ;loop until timeout, error, or user termination
	mov     di,offset quitchrs ;get list of possible termination chars
	mov     cx,quitlen ;length of list
	repnz   scasb   ;see if any match
	errchk  >e1     ;return carry clear if not
	strout  cr,lf   ;separate from line of dots
	print   'Info - Program terminated by user'
	stc     ;mark as error so it will terminate
	ret
e1:     jz      ret     ;continue if a termination key was hit
;this is only necessary because SCASB can leave C flag in unknown state        
	or      ax,ax   ;else clear carry
	pop     ax      ;don't continue
	ret     ;to main program
;
release:
	mov     ah,3    ;release type function
	mov     bx,ihandle ;get handle
	int     net     ;disconnect from network, deregister int handler
	ret     ;if we fail, it will crash system anyway so why check?
;
handler:
	or      ax,ax   ;incoming packet?
	jne     >p1     ;yes, skip ahead
#if !debug1        
	call    insque  ;make room if possible
#else        
	inc     pktcount ;just inc count if debugging
#endif
	retf    ;return with result in ES:DI
p1:     
#if (sync AND !debug1) ;should not be necessary, but ?
	neg     word ptr [si-2] ;clear the packet for processing
#endif        
	retf    ;nothing yet
;
tmochk: xor     ax,ax   ;service zero to get time
	int     1ah     ;from BIOS
	add     dx,quiet ;add two's complement of start time to get zero...
	cmp     dx,tmoval ;...plus time difference
	cmc     ;complement before return...
	ret     ;with carry set when timeout reached
;Following are the queue management routines, based on code from the RSX
;pool allocation/deallocation routines, the VAX queue instructions, and
;other code I have seen somewhere...
;Here is an idea of how it should work:
;               Address         Contents        Description
;The listhead:  0010            1000            Forward link (Flink)
;               0012            0000            Size of block (zero for hdr)
;               ...
;First Entry:   1000            0010            Flink
;               1002            8000            Size of block (when empty)
;That was for the free space queue. The packets will be doubly linked:
;RCVQHD:        0020            0020            Receive queue listhead
;               0022            0020            Points to itself
;               0024            0000            Marks listhead entry
;As space is needed, it will be taken from the free space list and linked
;into the packet queue:
;Freqhd:        0010            1400            Linked now past packet length
;               0012            0000
;               ...
;Rcvqhd:        0020            1000            Flink to first packet
;               0022            1000            Only one packet so far
;               0024            0000            Marks queue header
;               ...
;               1000            0020            Links now to RCVQHD
;               1002            0020            ...
;               1004            0400            Size of this packet
;               ...
;               1400            0010            Links to FREQHD
;               1402            7C00            8000h - 0400h
;               
insque: push    bx      ;save handle
;called with null in AX, handle in BX, packet length in CX, from interrupt        
;handler. Needs buffer address large enough to hold packet in ES:DI; if not
;enough space available, return 0:0 in ES:DI.
;Originally disabled interrupts here, then realized I didn't have to because        
;this is called by an interrupt handler... since the REMQUE routine DOES have
;interrupts disabled, there is no way this could ever be called while REMQUE
;is in progress anyway...
;7/1/95 Realized that, being called from an interrupt handler, will have DS        
;pointing elsewhere... will have to save segment registers and restore
;them afterwards
	or      cx,cx   ;is request null?
	if z jmp near >e3 ;skip it if so
	or      cs:badqueue,ax ;is queue already known to be corrupted?
	if nz jmp near >e3 ;skip if so
	push    ax      ;save null
	push    ds      ;save data segment register
	push    cs      ;now make DS and ES same as CS
	push    cs
	pop     es
	pop     ds
;for easier reading, how about some definitions:        
size=cx
thisentry=bx
lastentry=di
nextentry=si
zero=ax
pktsize=4 ;offset from entry
freesize=2 ;offset for freespace queue
flink=0 ;forward link offset        
blink=2 ;backward link offset
temp=ax ;for miscellaneous use
	add     size,6    ;make room for pointers in front of packet
	mov     lastentry,offset freqhd ;point to listhead
i1:     mov     thisentry,flink[lastentry] ;get next entry of freespace queue
	or      freesize[thisentry],zero ;see if end of queue
	errchk  >e1     ;check, and quit if so
	cmp     thisentry,offset inbuffer ;see if queue got messed up
	errchk  >e4     ;abort if so
	cmp     size,freesize[thisentry] ;check size of this packet
	jbe     >i2     ;skip ahead if enough room
	mov     lastentry,thisentry ;copy entry address if not
	jmp     i1      ;loop
;found room for the packet, so update both queues accordingly
i2:     jz      >i4     ;special treatment if exactly equal to desired size
	mov     temp,64   ;make sure at least 64 chars left over
	add     size,temp ;...
	cmp     size,freesize[thisentry] ;still less, or equal?
	ja      >i4     ;skip if not
	sub     size,temp ;restore count value
;split this chunk into two parts, one for this packet and then the leftover        
	add     flink[lastentry],size ;update forward link of previous entry
		;to point past the block we're about to use
	mov     temp,freesize[thisentry] ;snag size of this block
	sub     temp,size ;reduce by size of requested chunk
	mov     nextentry,thisentry ;copy the pointer
	add     nextentry,size ;increase pointer by size of requested chunk
	mov     freesize[nextentry],temp ;store size of remaining freespace
	mov     pktsize[thisentry],size ;size of new packet
	mov     temp,flink[thisentry] ;forward link remains the same
	mov     flink[nextentry],temp ;so copy it
;now place this same packet at the tail of the receive queue...        
i3:     mov     lastentry,rcvqhd+blink ;tail pointer
	mov     flink[lastentry],thisentry ;also point previous packet to it
	mov     blink[thisentry],lastentry ;point to previous tail
	mov     flink[thisentry],offset rcvqhd ;point forward link to header
#if (sync AND !debug1) ;should not be necessary
	neg     word ptr pktsize[thisentry] ;mark it pending
#endif        
	mov     rcvqhd+blink,thisentry ;replace with new entry address
;now store address in DI for return to the packet driver        
	mov     di,thisentry ;return pointer to this entry
	add     di,6 ;make sure to adjust for link words
	pop     ds      ;get real DS back
	pop     ax      ;now restore registers
	pop     bx
	sub     size,6    ;we added at beginning
	ret
i4:     sub     size,temp ;restore count value if altered
;Move pointers so as to eliminate this chunk from the freespace queue.
;Right now, BX contains the current pointer, and DI the forward pointer of
;the previous entry...
	mov     temp,flink[thisentry] ;get forward link from here
;Special case - if the pool is almost full, and this is the last little
;piece, then LASTENTRY will be the header, and so will the FLINK of this
;entry. Also, it's the only case in which they'd be identical.
	cmp     temp,lastentry ;is this the last smidgin of freespace?
	errchk  >e1     ;quit if so
	mov     flink[lastentry],temp ;store in forward link of previous entry
	mov     pktsize[thisentry],freesize[thisentry] ;store the size
	jmp     i3      ;use common routine to finish up
e1:     jnz     ret     ;continue if nonzero
	inc     fullpool ;else indicate that pool was found full
e2:     pop     ax      ;else toss return address
	pop     ds      ;restore data segment
	pop     ax      ;get null back
e3:     mov     es,ax   ;set ES:DI null
	mov     di,ax   ;...
	pop     bx      ;restore handle
	ret     ;to interrupt handler
e4:     jnc     ret     ;continue if queue OK
	inc     badqueue ;else indicate error
	jmp     e2      ;return null pointer        
;
;If any packets exist, return the pointer in DI; otherwise set Z flag
getpkt: cli     ;don't allow ints while we check the pointer
	mov     di,rcvqhd ;get forward link from listhead
	cmp     di,[di]   ;compare with what it points to
	sti     ;reenable interrupts
	jz      ret     ;return if so
#if (sync AND !debug1)        
	test    word ptr [di+4],8000h ;check if negative (in progress)
	js      >g1     ;skip, storage routine not finished yet
#endif        
	cmp     di,offset inbuffer-1 ;set carry if below buffer area
	ret
#if (sync AND !debug1)
g1:     cmp     di,di   ;set Z flag to indicate empty
	ret
#endif
;
;REMQUE called with DI pointer to packet just used, now to be released
previous=bx
following=si
finished=di
adjustments=cx
remque:        
	cli     ;don't allow queue manipulation to be interrupted
	mov     previous,blink[finished] ;get the backward link
	mov     following,flink[finished] ;the forward link
	clear   adjustments ;inc when an adjustment made
	mov     flink[previous],following ;bypass finished packet
	mov     blink[following],previous ;...
;that's it for the receive queue, now adjust the free space list
;Now, of course we could just link it in, but what if it borders, either at        
;the front or the back, on another free block? We should in that case connect
;ourselves to that block, to avoid fragmentation of the buffer...
freechunk=bx ;OK to redefine since we're done with "previous"
endfin=si ;ditto with "following"
tmpptr=bp ;OK to define, we're not using as frame pointer, and SS=CS
endfree=dx
	mov     endfin,pktsize[finished] ;get our length...
	mov     freesize[finished],endfin ;store for singly-linked list
	add     endfin,finished ;and add our addr to get start of next block
	mov     freechunk,freqhd+flink ;get flink of free space list
;let's link it in first at the front of the list, then try to compress it...
	mov     flink[finished],freechunk ;store listhead's flink as ours
	mov     freqhd+flink,finished ;and our address at listhead
r1:     cmp     adjustments,2 ;already made max # of adjustments?
	errchk  >e1     ;quit if so
	mov     endfree,freechunk ;copy into an unused register
	add     endfree,freesize[freechunk] ;add length of this chunk
	cmp     endfree,freechunk ;was length zero (end of list)?
	errchk  >e1     ;if so, we're done
	cmp     endfin,freechunk ;end of released chunk touches start?
	errchk  >e2     ;connect to it if so
	cmp     endfree,finished ;does end of this chunk touch start of ours?
	errchk  >e3     ;connect to it if so
	mov     freechunk,flink[freechunk] ;link to next entry
	jmp     r1      ;loop till entire queue is traversed
;We could of course quit when any of the conditions is met, but that would
;fragment the pool unnecessarily
e1:     jne     ret     ;return if not pointing to listhead
	pop     ax      ;don't continue
	sti     ;reenable interrupts and return
	ret
e2:     jne     ret     ;return if not the same
;here if end of the chunk we're releasing touches start of another entry
	mov     temp,freesize[freechunk] ;get its length
	add     freesize[finished],temp ;add to our length
	mov     flink[finished],flink[freechunk] ;make its flink ours
	inc     adjustments ;show that we manipulated the pointers
	ret     ;back to see if we can optimize again
e3:     jne     ret     ;return if not the same
;here if end of previous chunk is touching the start of this one
	mov     temp,freesize[finished] ;get our length
	add     freesize[freechunk],temp ;add to the other block
	mov     freqhd+flink,freechunk ;reflect changed start address
	mov     finished,freechunk ;change FINISHED but not ENDFIN
	inc     adjustments ;show that we did something
	ret
;
txterr:
;if followed by a string, prints the string to STDERR; if followed
; immediately by a null, uses string address in BX
	call    saval   ;save registers
	mov     bp,sp   ;so we can use relative addressing
	mov     di,[bp+22] ;address of text, after we...
	add     di,2    ;point past the branch
	mov     al,[di] ;let's see if it's null...
	or      al,al   ;...
	mov     dx,di   ;assume it's not
	jne     >a2     ;skip if not
	mov     dx,bx   ;else use address in BX
	mov     di,dx   ;copy pointer to start of string
	mov     cx,80   ;max string length
	xor     al,al   ;look for null
	repnz   scasb   ;loop till null is found
	mov     cx,di   ;get original pointer
	sub     cx,dx   ;subtract string start
	dec     cx      ;don't print the null
	jmp     short   >a3
a2:     mov     bx,[bp+22] ;get the address of the branch instruction
	mov     cl,byte ptr [bx+1] ;load the offset into count register
	xor     ch,ch   ;clear the high byte
a3:     ;skipped to here if address was in BX and we had to find end
	mov     bx,stderr ;standard handle for error device (screen)
	mov     ah,40h  ;specify write function
	int     dos     ;do it...
	ret
;
numerr:
	call    saval   ;save registers
	sub     sp,6    ;need 5 spaces for number-to-string conversion
			;plus one extra space for leading zero
	mov     bp,sp   ;for relative addressing
	xor     si,si   ;for clearing registers
	mov     di,5    ;pointer into digits
	mov     cx,10   ;constant for division
	mov     byte [bp+di],'0' ;init with ASCII zero
	or      ax,ax   ;is number zero?
	je      >a2     ;if so, skip computation
a1:     mov     byte [bp+di],'0' ;init with ASCII zero
	mov     dx,si   ;clear high word
	div     cx      ;put remainder in DX
	or      [bp+di],dl ;and merge with '0' to make ASCII number
	dec     di      ;adjust the pointer
	or      ax,ax   ;see if we're done
	jne     a1      ;loop if not
	inc     di      ;adjust upwards for last DEC
a2:     mov     cx,6    ;max chars to send, plus 1
	sub     cx,di   ;subtract pointer to get actual number
	lea     dx,[bp+di] ;address of string
	mov     bx,stderr ;standard handle for error device
	mov     ah,40h  ;specify write function
	int     dos     ;do it...
	add     sp,6    ;clear off the buffer we made at entry
	ret
;
hexerr:
	call    saval   ;save registers
	sub     sp,4    ;need 4 spaces for number-to-string conversion
	mov     bp,sp   ;for relative addressing
	xor     si,si   ;for clearing registers
	mov     di,3    ;pointer into digits
	mov     cx,16   ;constant for division
	mov     bx,offset >h1 ;get address of hex translation table
a1:     mov     dx,si   ;clear high word
	div     cx      ;put remainder in DX
	xchg    ax,dx   ;swap for a sec...
	xlat    ;make HEX ASCII digit
	mov     [bp+di],al ;store in the string
	xchg    ax,dx   ;swap back
	dec     di      ;adjust the pointer
	jns     a1      ;loop if not done
a2:     mov     cx,4    ;send the whole string
	mov     dx,bp   ;address of string
	mov     bx,stderr ;standard handle for error device
	mov     ah,40h  ;specify write function
	int     dos     ;do it...
	add     sp,4    ;clear off the buffer we made at entry
	ret
h1:     db      '0123456789ABCDEF'
;
saval:
;Equivalent to the RSX-11M coroutine of the same name.
;Saves all registers and restores them on return...
;Not for use by routines which return values in registers or flags.
	pushf           ;AX will be stored just below this
	push    bx,cx,dx,bp,di,si,ds,es
;don't bother with CS nor SS, if those are changed all is lost!
	mov     bp,offset >s1 ;"RETURN" address to restore registers
	push    bp      ;save it
	mov     bp,sp   ;get stack pointer right here
	push    20[bp]  ;get caller's return address at top
	mov     20[bp],ax ;save AX where it was
	mov     bp,10[bp] ;restore BP value
	ret     ;to caller, which must issue "RET" to get back here
;Offsets on return:
;       ES      +2      ;from SP
;       DS      +4
;       SI      +6
;       DI      +8
;       BP      +10
;       DX      +12
;       CX      +14
;       BX      +16
;       Flags   +18
;       AX      +20
;       RetAddr +22     ;return address of caller's caller
s1:     pop     es,ds,si,di,bp,dx,cx,bx
	popf
	pop     ax
	ret     ;to caller's caller, same as with RSX routine
;
inbuffer:
	dw      freqhd,8000h ;flink,chunksize
